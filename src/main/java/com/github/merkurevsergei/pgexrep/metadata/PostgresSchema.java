package com.github.merkurevsergei.pgexrep.metadata;

import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostgresSchema {

    private final Tables tables = new Tables();
    private final List<TableId> tableIds = new ArrayList<>();

    public void refresh(DatabaseMetaData metadata) {
        try (ResultSet rs = metadata.getTables(null, null, null, null)) {
            try {
                while (rs.next()) {
                    final String catalogName = rs.getString(1);
                    final String schemaName = rs.getString(2);
                    final String tableName = rs.getString(3);
                    final String tableType = rs.getString(4);
                    if (isTableType(tableType)) {
                        TableId tableId = new TableId(catalogName, schemaName, tableName);
                        tableIds.add(tableId);
                    }
                }
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        for (Table table : tables.getTables()) {
//            Map<TableId, List<Column>> cols = getColumnsByTableId(databaseCatalog, schemaNamePattern, includeTable.table(), tableFilter,
//                                                                columnFilter, metadata, viewIds);
        }
    }

    protected boolean isTableType(String tableType) {
        return "TABLE".equals(tableType);
    }

    protected Map<TableId, List<Column>> getColumnsDetails(String databaseCatalog, String schemaName, String tableName,
                                                           DatabaseMetaData metadata) throws SQLException {
        Map<TableId, List<Column>> columnsByTable = new HashMap<>();
        try (ResultSet columnMetadata = metadata.getColumns(databaseCatalog, schemaName, tableName, null)) {
            while (columnMetadata.next()) {
                String catalogName = columnMetadata.getString(1);
                String schemaNameGet = columnMetadata.getString(2);
                String metaTableName = columnMetadata.getString(3);
                TableId tableId = new TableId(catalogName, schemaNameGet, metaTableName);
                List<Column> tableColumns = columnsByTable.getOrDefault(tableId, new ArrayList<>());
                Column column = readTableColumn(columnMetadata);
                tableColumns.add(column);
                columnsByTable.put(tableId, tableColumns);
            }
        }
        return columnsByTable;
    }

    protected Column readTableColumn(ResultSet columnMetadata) throws SQLException {
        // Oracle drivers require this for LONG/LONGRAW to be fetched first.
        final String defaultValue = columnMetadata.getString(13);

        final String columnName = columnMetadata.getString(4);
        String columnType = columnMetadata.getString(6);
        int columnLength = columnMetadata.getInt(7);

        Integer scale = null;
        if (columnMetadata.getObject(9) != null) {
            scale = columnMetadata.getInt(9);
        }
        boolean optional = isNullable(columnMetadata.getInt(11));
        int position = columnMetadata.getInt(17);
        boolean autoIncremented = "YES".equalsIgnoreCase(columnMetadata.getString(23));

        String autogenerated = null;
        try {
            autogenerated = columnMetadata.getString(24);
        } catch (SQLException e) {
            // ignore, some drivers don't have this index - e.g. Postgres
        }

        boolean generated = "YES".equalsIgnoreCase(autogenerated);


        int nativeType = -1;
        int jdbcType = columnMetadata.getInt(5);

        return new Column(columnName, position, jdbcType, nativeType, columnType, null, null, columnLength, scale, optional,
                          autoIncremented, generated, defaultValue, defaultValue != null, List.of(), null);

    }

    protected static boolean isNullable(int jdbcNullable) {
        return jdbcNullable == ResultSetMetaData.columnNullable || jdbcNullable == ResultSetMetaData.columnNullableUnknown;
    }

}